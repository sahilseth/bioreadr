#!/bin/bash -e
## usage: split_fq number_of_chunks fastq


# Usage info
show_help() {
cat << EOF

FASTQ Splitter
sseth @ MD Anderson

Usage: ${0##*/} [-c number of chunks] [-n number of reads per file] -f [fastq file]
Split a fastq files into specific number of (predetermined) chunks.

    -f FASTQ    Input fastq file.
    -o prefix   Output prefix to be used (only necessary when input is pipe)
    -c chunks   Number of chunks, into which the fastq file would be divided OR
    -n num      Number of reads per output fastq file.
    -h          display this help and exit
    -v          verbose mode. Not used.

One needs to supply either number of chunks (using -c) OR number of reads (using -n), but not both.

EOF
} 

fq=  chunks= num= prefix=

while getopts "hf:c:n:o:z" opt; do
  case $opt in
  h)
      show_help
      exit 0
      ;;
  f)
      fq=$OPTARG
      ;;
  c)
      chunks=$OPTARG
      ;;
  n)
      num=$OPTARG
      ;;
  o)
      prefix=$OPTARG
      ;;
  z)
      zipit=1
      ;;
  '?')
      show_help >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND - 1))


#fq=/rsrch1/iacs/tmp/illumina_platinum/50x/NA12877/ERR194146_1.fastq.gz

## --- needs the following variables declared in name space
#chunks=$1
#fq=$2

if [ ! -f "$fq" ] && [ ! $fq == "/dev/stdin" ]; then
    echo -e "\nFastq file does not exist, please check. $fq\n"
    show_help
    exit 1
fi

## basename:
if [ $fq == "/dev/stdin" ];then
  if [ "${prefix}" == "" ];then
    echo "Please specify the output prefix, using -o fastq. ${prefix}"
    show_help
    exit 1
  fi
  echo `date` "; Using prefix: $prefix"
else
  prefix="${fq%.*}."
  echo `date` "; Using prefix: $prefix"
fi


## use extenstion
if [ "${fq##*.}" == "gz" ]; then
  cat_cmd="zcat"
elif [ $fq == "/dev/stdin" ];then
  cat_cmd="cat"
else
  cat_cmd="cat"
fi

## calculate num
if [ ! ${chunks} == "" ]; then
  echo `date` "; Working on $fq, to be split into $chunks chunks, getting total reads in the file..."
  ## -- get number of lines
  tot_lines=$($cat_cmd $fq | wc -l )
  ## --- num should be divisible by 4 !
  numl=$(expr $tot_lines / $chunks)
  numl=$(expr $num % 4 + $num)

elif [ ! ${num}  == "" ]; then
  numl=$(expr $num \* 4)
  echo -e `date` "; The file would be split with $num reads, $numl lines each, splitting..."

else
  show_help
  exit 1
fi



## actual splitting
base="$(basename `mktemp`)_"
$cat_cmd $fq | split -l $numl -d -a 3 - $base


#-d  adds digit prefixes instead of alphabetic
#-a 3  allows you to add more digits to output files.
#b  is the prefix to use
#In this example: output will be b000...b999 


## rename them:
echo `date` "; Renaming files..."

## get total number of file
#end=$(expr $chunks - 1)
end=$(ls -l $base* | wc -l)
#end=$(expr $end - 1)

echo "working on $end files..."

cmdfile=$(mktemp)

for i in $(seq 0 $end); do
  fl=$base$(printf "%03d" $i);
  out=$prefix$(printf "%03d" $i).fastq;
  if [ -f $fl ] && [ $zipit == 1 ]; then
    echo "mv $fl ${out};gzip ${out}" >> $cmdfile
  elif [ -f $fl ];then
    echo "mv $fl ${fl}.fastq" >> $cmdfile
  fi
done

echo "running $cmdfile"
cat $cmdfile | parallel -j 12

#rm $cmdfile


##~% FILE="example.tar.gz"
##~% echo "${FILE%%.*}"
##example
##~% echo "${FILE%.*}"
##example.tar
##~% echo "${FILE#*.}"
##tar.gz
##~% echo "${FILE##*.}"
##gz

